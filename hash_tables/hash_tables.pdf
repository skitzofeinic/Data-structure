%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 5 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
5 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
6 0 obj
<<
/Contents 18 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 17 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
7 0 obj
<<
/Contents 19 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 17 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
8 0 obj
<<
/Contents 20 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 17 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
9 0 obj
<<
/Outlines 11 0 R /PageLabels 21 0 R /PageMode /UseNone /Pages 17 0 R /Type /Catalog
>>
endobj
10 0 obj
<<
/Author () /CreationDate (D:20231119155655+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20231119155655+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Assignment 3: Indexing words) /Trapped /False
>>
endobj
11 0 obj
<<
/Count 5 /First 12 0 R /Last 16 0 R /Type /Outlines
>>
endobj
12 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 729.0236 0 ] /Next 13 0 R /Parent 11 0 R /Title (Objectives)
>>
endobj
13 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 666.0236 0 ] /Next 14 0 R /Parent 11 0 R /Prev 12 0 R /Title (Requirements)
>>
endobj
14 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 441.0236 0 ] /Next 15 0 R /Parent 11 0 R /Prev 13 0 R /Title (Getting started)
>>
endobj
15 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 765.0236 0 ] /Next 16 0 R /Parent 11 0 R /Prev 14 0 R /Title (Output format)
>>
endobj
16 0 obj
<<
/Dest [ 8 0 R /XYZ 62.69291 629.8236 0 ] /Parent 11 0 R /Prev 15 0 R /Title (Grading)
>>
endobj
17 0 obj
<<
/Count 3 /Kids [ 6 0 R 7 0 R 8 0 R ] /Type /Pages
>>
endobj
18 0 obj
<<
/Length 7673
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 89.91488 0 Td (Assignment 3: Indexing words) Tj T* -89.91488 0 Td ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Objectives) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 678.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .18683 Tw (You will need to implement a resizing array and hash table API, and use those to create a complete index) Tj T* 0 Tw (of all words in a file.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Requirements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 627.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Your program must be named ) Tj /F3 10 Tf (lookup) Tj /F1 10 Tf (, and its basic operation is as follows:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 621.0236 cm
Q
q
1 0 0 1 62.69291 621.0236 cm
Q
q
1 0 0 1 62.69291 597.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .864431 Tw (It takes a single command-line argument, the name of the file to build the index for, and builds the) Tj T* 0 Tw (corresponding word index table.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 591.0236 cm
Q
q
1 0 0 1 62.69291 555.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .555777 Tw 12 TL /F1 10 Tf 0 0 0 rg (It proceeds to read lines from standard input and gets the first word ignoring the rest of each line. It) Tj T* 0 Tw .758626 Tw (then searches for that word in the index table. ) Tj /F4 10 Tf (If the word is in the index table, it will list all the line) Tj T* 0 Tw (numbers this word occurred on in the original file.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 549.0236 cm
Q
q
1 0 0 1 62.69291 525.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .869318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Alternatively, it takes one additional argument ) Tj /F3 10 Tf (-t) Tj /F1 10 Tf ( and performs a series of timing tests for different) Tj T* 0 Tw (parameter sets when building the table.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 525.0236 cm
Q
q
1 0 0 1 62.69291 483.0236 cm
q
BT 1 0 0 1 0 26 Tm .91686 Tw 12 TL /F1 10 Tf 0 0 0 rg (For the input file, all non-alphabetical characters should be treated as ) Tj /F2 10 Tf (spacing) Tj /F1 10 Tf ( and all letters should be) Tj T* 0 Tw 1.57561 Tw (converted to lowercase before being stored in the table. ) Tj /F4 10 Tf (The words read on standard input should be) Tj T* 0 Tw (converted in the same way to ensure they match the format in the table.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 453.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.796457 Tw 12 TL /F1 10 Tf 0 0 0 rg (You must submit your work as a tarball. The command ) Tj /F3 10 Tf (make) Tj ( ) Tj (tarball) Tj /F1 10 Tf ( will create a a tarball called) Tj T* 0 Tw /F3 10 Tf (hash_table_submit.tar.gz) Tj /F1 10 Tf ( containing the relevant files.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 420.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Getting started) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 408.0236 cm
Q
q
1 0 0 1 62.69291 408.0236 cm
Q
q
1 0 0 1 62.69291 348.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm -0.108346 Tw 12 TL /F1 10 Tf 0 0 0 rg (Start by writing the code for ) Tj /F3 10 Tf (array.c) Tj /F1 10 Tf (, which is the data structure that will contain all the line numbers) Tj T* 0 Tw .353735 Tw (for a specific word. Some words might only occur once, while common words will occur many times,) Tj T* 0 Tw .703984 Tw (so your array should be able to scale appropriately depending on the number of elements inserted.) Tj T* 0 Tw .102339 Tw (The command ) Tj /F3 10 Tf (make) Tj ( ) Tj (check) Tj /F1 10 Tf ( will run some basic test, ) Tj /F4 10 Tf (but these checks will not test all functionality of) Tj T* 0 Tw (your array.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 342.0236 cm
Q
q
1 0 0 1 62.69291 282.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm 2.53784 Tw 12 TL /F1 10 Tf 0 0 0 rg (Next, start writing the code for ) Tj /F3 10 Tf (hash_table.c) Tj /F1 10 Tf (. The code here will depend on your ) Tj /F3 10 Tf (array.c) Tj /F1 10 Tf  T* 0 Tw .680542 Tw (working, as the table should return the complete array of line numbers for a given word. Be sure to) Tj T* 0 Tw 3.595697 Tw (add some functions of your own to better divide up the code's functionality. The command) Tj T* 0 Tw 2.642485 Tw /F3 10 Tf (make) Tj ( ) Tj (check) Tj /F1 10 Tf ( will also run several tests on your hash table, ) Tj /F4 10 Tf (but again the provided tests are) Tj T* 0 Tw (incomplete.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 276.0236 cm
Q
q
1 0 0 1 62.69291 216.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm .648651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Write the code in ) Tj /F3 10 Tf (main.c) Tj /F1 10 Tf (. We already provide the implementation of the ) Tj /F3 10 Tf (main\(\)) Tj /F1 10 Tf ( function. You will) Tj T* 0 Tw -0.002367 Tw (need to complete the function that creates the hash table and the function that performs the lookup in) Tj T* 0 Tw .260574 Tw (the hash table. Make sure to convert the input as specified by the requirements above and study the) Tj T* 0 Tw .310542 Tw (output format in the example below. The last test that ) Tj /F3 10 Tf (make) Tj ( ) Tj (check) Tj /F1 10 Tf ( runs looks up a couple of words) Tj T* 0 Tw (in a large text file to test your complete program.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 210.0236 cm
Q
q
1 0 0 1 62.69291 174.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .813314 Tw 12 TL /F1 10 Tf 0 0 0 rg (Add more hash functions to ) Tj /F3 10 Tf (hash_func.c) Tj /F1 10 Tf ( \(and modify ) Tj /F3 10 Tf (hash_func.h) Tj /F1 10 Tf ( accordingly\). You can write) Tj T* 0 Tw .149318 Tw (your own hash functions or search for existing solutions online. If you use existing solutions, attribute) Tj T* 0 Tw (the original author and provide a link to the source.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 168.0236 cm
Q
q
1 0 0 1 62.69291 108.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm .033314 Tw 12 TL /F1 10 Tf 0 0 0 rg (Study the provided function ) Tj /F3 10 Tf (timed_construction) Tj /F1 10 Tf (, which builds the table many times with different) Tj T* 0 Tw 1.746412 Tw (parameters. Add your own hash functions to the parameter set and expand the other parameter) Tj T* 0 Tw .013516 Tw (options as you think would be sensible. Rerun the timing tests using the ) Tj /F3 10 Tf (-t) Tj /F1 10 Tf ( option. We have included) Tj T* 0 Tw 3.351318 Tw (several books for you to test with. Include your best parameter set in the default ) Tj /F3 10 Tf (#define) Tj /F1 10 Tf  T* 0 Tw (parameters at the top of the file.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 108.0236 cm
Q
 
endstream
endobj
19 0 obj
<<
/Length 2894
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Output format) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL -0.111124 Tw (Once the hash table is built, the program should read words from standard input and print the line numbers) Tj T* 0 Tw -0.016012 Tw (for each word. Only the first word of every input line on stdin should be processed, any words after the first) Tj T* 0 Tw 2.677126 Tw (word should be ignored. The first word must be converted to lowercase, with any non-alphabetical) Tj T* 0 Tw (character treated as spacing.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
q
BT 1 0 0 1 0 26 Tm .112209 Tw 12 TL /F1 10 Tf 0 0 0 rg (The program prints the converted lowercase word, and on every next line, a ) Tj /F3 10 Tf (*) Tj /F1 10 Tf ( followed by the line number) Tj T* 0 Tw -0.083543 Tw (on which that word occurred. The program should print an empty line between word entries. Starting with a) Tj T* 0 Tw (simple example you should expect the following output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 314.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 324 re B*
Q
q
BT 1 0 0 1 0 302 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ nl test.txt   # 'nl' adds line numbers to print a file.) Tj T* (     1      hello) Tj T* (     2      how are you) Tj T* (     3      today. I am fine. Thank) Tj T* (     4      you. hi) Tj T* (     5      Hi hi) Tj T*  T* ($ cat words.txt) Tj T* (you) Tj T* (I) Tj T* (hi) Tj T*  T* ($ ./lookup test.txt  ) Tj (<) Tj ( words.txt) Tj T* (you) Tj T* (* 2) Tj T* (* 4) Tj T*  T* (i) Tj T* (* 3) Tj T*  T* (hi) Tj T* (* 4) Tj T* (* 5) Tj T* (* 5) Tj T*  T* ($) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 282.8236 cm
q
BT 1 0 0 1 0 14 Tm -0.072118 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the ) Tj /F3 10 Tf ($) Tj /F1 10 Tf ( represents the bash prompt and is not part of the output that your program should produce.) Tj T* 0 Tw (It is shown here to indicate that last line of your output should be a blank line.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 252.8236 cm
q
BT 1 0 0 1 0 14 Tm .500814 Tw 12 TL /F1 10 Tf 0 0 0 rg (As a more complex test we type the command ) Tj /F3 10 Tf (./lookup) Tj ( ) Tj (origin-of-species-ascii.txt) Tj /F1 10 Tf (, with the) Tj T* 0 Tw (input ) Tj /F3 10 Tf (Creature's) Tj /F1 10 Tf (, and we should see the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 99.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F3 10 Tf 12 TL ($ echo "Creature's" | ./lookup origin-of-species-ascii.txt) Tj T* (creature) Tj T* (* 3863) Tj T* (* 5878) Tj T* (* 7797) Tj T* (* 11876) Tj T* (* 13333) Tj T* (* 13627) Tj T* (* 13873) Tj T*  T* ($) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
20 0 obj
<<
/Length 5710
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .429988 Tw (If a word occurs several times on the same line, the line number is printed multiple times, each time on a) Tj T* 0 Tw (new line.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
q
BT 1 0 0 1 0 14 Tm .724751 Tw 12 TL /F1 10 Tf 0 0 0 rg (If a word does not occur in the text at all, your program should just output a blank line. So, for example,) Tj T* 0 Tw (with the input ) Tj /F3 10 Tf (Esoteric) Tj /F1 10 Tf ( in ) Tj /F4 10 Tf (Origin of Species) Tj /F1 10 Tf ( it should look like this:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 641.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL ($ echo "esoteric" | ./lookup origin-of-species-ascii.txt) Tj T* (esoteric) Tj T*  T* ($) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 608.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Grading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 590.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Your grade starts from 0, and the following tests determine your grade:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 584.8236 cm
Q
q
1 0 0 1 62.69291 584.8236 cm
Q
q
1 0 0 1 62.69291 560.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .377045 Tw 12 TL /F1 10 Tf 0 0 0 rg (+2pt if you have submitted an archive in the right format, your source code builds without errors and) Tj T* 0 Tw (you have clearly made a real effort to implement ) Tj /F3 10 Tf (array.c) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (hash_table.c) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 554.8236 cm
Q
q
1 0 0 1 62.69291 542.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1pt if your resizing array implementation works correctly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 536.8236 cm
Q
q
1 0 0 1 62.69291 524.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+2pt if your hash table correctly supports basic inserts and lookup of integers.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 518.8236 cm
Q
q
1 0 0 1 62.69291 506.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1pt if your hash table correctly resizes when the maximum load factor is exceeded.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 500.8236 cm
Q
q
1 0 0 1 62.69291 488.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1pt if your hash table correctly extends the existing value array if the key was already present.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 482.8236 cm
Q
q
1 0 0 1 62.69291 470.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your hash table correctly deletes keys.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 464.8236 cm
Q
q
1 0 0 1 62.69291 452.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your program returns the correct line numbers when given a test file and test input.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 446.8236 cm
Q
q
1 0 0 1 62.69291 434.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your program correctly handles non-alphabetical characters and uppercase characters.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 428.8236 cm
Q
q
1 0 0 1 62.69291 404.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.795318 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0.5pt if you have added hash functions and included your best parameter set in the default) Tj T* 0 Tw /F3 10 Tf (#define) Tj /F1 10 Tf (. parameters for the table in ) Tj /F3 10 Tf (main.c) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 398.8236 cm
Q
q
1 0 0 1 62.69291 386.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1pt If your implementation has the correct style and the correct complexity.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 380.8236 cm
Q
q
1 0 0 1 62.69291 356.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.220751 Tw 12 TL /F1 10 Tf 0 0 0 rg (-1pt if your code produces any warnings using the flags ) Tj /F3 10 Tf (-Wpedantic) Tj ( ) Tj (-Wall) Tj ( ) Tj (-Wextra) Tj /F1 10 Tf ( when) Tj T* 0 Tw (compiling.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 356.8236 cm
Q
 
endstream
endobj
21 0 obj
<<
/Nums [ 0 22 0 R 1 23 0 R 2 24 0 R ]
>>
endobj
22 0 obj
<<
/S /D /St 1
>>
endobj
23 0 obj
<<
/S /D /St 2
>>
endobj
24 0 obj
<<
/S /D /St 3
>>
endobj
xref
0 25
0000000000 65535 f 
0000000073 00000 n 
0000000134 00000 n 
0000000241 00000 n 
0000000353 00000 n 
0000000458 00000 n 
0000000573 00000 n 
0000000778 00000 n 
0000000983 00000 n 
0000001188 00000 n 
0000001293 00000 n 
0000001579 00000 n 
0000001653 00000 n 
0000001764 00000 n 
0000001890 00000 n 
0000002019 00000 n 
0000002146 00000 n 
0000002254 00000 n 
0000002326 00000 n 
0000010051 00000 n 
0000012997 00000 n 
0000018759 00000 n 
0000018818 00000 n 
0000018852 00000 n 
0000018886 00000 n 
trailer
<<
/ID 
[<76d2974f3bfbace55050dfc348cf0bc6><76d2974f3bfbace55050dfc348cf0bc6>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 10 0 R
/Root 9 0 R
/Size 25
>>
startxref
18920
%%EOF
